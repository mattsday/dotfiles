# This file loads various defaults on virtually any bourne-compatible
# shell. It's designed to be POSIX and flavour-neutral. Any rc file
# can load this (e.g. zshrc, kshrc, bashrc) for consistency across
# environments
#
# Latest copy always here: https://github.com/mattsday/dotfiles/

# Execute any local bourne script config - local config should go in _local below:
if [ -f "$HOME/.shell_common_config" ]; then
	. "$HOME/.shell_common_config"
fi

# Set some local utilities as default (this must be top of this file after local config)
if [ -d /usr/local/bin ]; then
	# Affix /usr/local/bin to PATH as homebrew zsh doesn't do this for some
	# reason
	PATH=/usr/local/bin:$PATH
	export PATH

	# Create an update alias if homebrew is installed
	if [ -x /usr/local/bin/brew ]; then
		alias update="brew update; brew upgrade; brew cleanup; brew doctor"
		# Opt out of homebrew fucking analytics
		HOMEBREW_NO_ANALYTICS=1
		export HOMEBREW_NO_ANALYTICS
	fi
fi

# If GNU ls is available on a BSD system, use it:
if [ -x /usr/local/bin/gls ]; then
	alias ls='/usr/local/bin/gls --color=auto'
# Otherwise check if /usr/bin/dircolors exists which is a good sign it's GNU ls
elif [ -x /usr/bin/dircolors ]; then
	alias ls='ls --color=auto'
fi

# =================
# Alias definitions
# =================
# Check the presence of various utilities and alias them to give them
# preference ahead of lesser system defaults

# Always prefer vim to alternatives
if command -v vim > /dev/null 2>&1; then
	VISUAL=`command -v vim`
	USE_EDITOR=$VISUAL
	EDITOR=$VISUAL
	export VISUAL USE_EDITOR EDITOR
	# Some systems are cruel and have vi + vim installed side-by-side
	# As some of these systems are too ancient to even support alias,
	# set vi as a function:
	vi () {
		$VISUAL $*
	}
fi

# Set less as the default pager
if command -v less > /dev/null 2>&1; then
	PAGER=`command -v less`
	export PAGER
fi

# If we can sudo dodo!
if [ -x /usr/bin/sudo ] || [ -x /usr/local/bin/sudo ]; then
	# Alias sudo so it can be expanded with aliases (e.g. sudo ll)
	alias sudo='sudo '
	# Debian based systems
	#
	if [ -x /usr/bin/apt-get ]; then
		# Use apt or aptitude if they exist instead of apt-get for interactive stuff
		if [ -x /usr/bin/aptitude ]; then
			alias aptitude='sudo aptitude'
			alias apt-get='aptitude'
			alias apt-cache="aptitude -F '%1p %40d# (%C) %D %10V'"
		elif [ -x /usr/bin/apt ]; then
			alias apt='sudo apt'
			alias apt-get='apt'
			alias apt-cache='apt'
		else
			alias apt-get='sudo apt-get'
		fi
		alias update='apt-get update && apt-get upgrade'
	fi
	# Same if using RPM-based distributions
	if [ -x /usr/bin/yum ]; then
		alias yum='sudo yum'
		alias update='yum update'
	fi
	# Oh Fedora you special little turkey...
	if [ -x /usr/bin/dnf ]; then
		alias dnf='sudo dnf'
		alias yum='dnf'
		alias update='dnf update'
	fi
	# SUSE based distributions
	if [ -x /usr/bin/zypper ]; then
		alias zypper='sudo zypper'
		alias update='zypper update'
	fi
	# FreeBSD
	if [ -x /usr/sbin/pkg ]; then
		alias pkg='sudo /usr/sbin/pkg'
		alias update='pkg update && pkg upgrade'
	fi
	if [ -x /usr/sbin/freebsd-update ]; then
		alias freebsd-update='sudo /usr/sbin/freebsd-update'
	fi
	# OpenBSD (might get confused with xBSD)
	if [ -x /usr/sbin/pkg_add ]; then
		alias pkg_add='sudo /usr/sbin/pkg_add'
		alias pkg_delete='sudo /usr/sbin/pkg_delete'
		alias update > /dev/null 2>&1;
		if [ $? -gt 0 ]; then
			alias update='pkg_add -uvi'
		fi
	fi
	# Always restart services as root
	if [ -x /usr/sbin/service ]; then
		alias service='sudo service'
	fi
fi

# Colour grep output if GNU grep
grep_ver=`grep --version 2> /dev/null`
case $grep_ver in
	*GNU*|*FreeBSD*)
		alias grep='grep --color=auto'
		alias egrep='egrep --color=auto'
		alias fgrep='fgrep --color=auto'
		GREP_COLORS="ms=01;32:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36"
		export GREP_COLORS
		;;
esac
unset grep_ver

# Meh, shit happens:
alias 'cd..=cd ..'
alias 'cd~=cd ~'
alias 'tmuxa=tmux a'

# If autocd doesn't work then at least give me this!
alias ..='cd ..'

# Common shortcuts
alias ll='ls -lah'
alias l='ls -aCF'
alias l.='ls -d .*'

# Find function to quickly look for things in pwd
f() {
	find . -iname "*$1*"
}

# Grep find
gf() {
	grep -Ri "$1"
}

# Disable shell history for session
disable_hist() {
	unset HISTFILE
	set +o history 2>/dev/null
}

# =====================
# Environment variables
# =====================
# These affect most systems and are (usually) harmless if run without...

# Sets ls and various commands to use yyyy-mm-dd as the date format
TIME_STYLE="long-iso"
export TIME_STYLE

# OS X ls colouring (non-gnu ls)
CLICOLOR="yes"
LSCOLORS="gxhxfxcxcxdxcxcxcxgxgx"
export CLICOLOR LSCOLORS

# Do we need to load proxy settings?
if [ -f "$HOME/.enable_proxy" ]; then
	[ -f "$HOME/.proxy_settings" ] && . $HOME/.proxy_settings
fi

# Check if OpenStack RC file exists:
if [ -f "$HOME/.openstack_credentials" ]; then
	. "$HOME/.openstack_credentials"
fi

# =====================
# Colour support
# =====================
# Checks about terminal colour support

# Check if colours are forced-enabled/disabled:
if [ -f "$HOME/.enable_shell_colour" ]; then
	colours=256
elif [ -f "$HOME/.disable_shell_colour" ]; then
	colours=7
else
	# Test for number of colours
	colours=`tput colors 2> /dev/null`
	# If tput errors out then try and fix...
	if [ $? -gt 0 ]; then
		# If it's reporting as a 256-colour term try changing to just an xterm
		[ "$TERM" = "xterm-256color" ] && TERM=xterm && export TERM
		colours=`tput colors 2> /dev/null`
		# If that still fails then disable colour
		if [ $? -gt 0 ]; then
			colours=7
		fi
	fi
fi

# Execute any local bourne scripts:
if [ -f "$HOME/.shell_common_local" ]; then
	. "$HOME/.shell_common_local"
fi

# vim: syntax=sh
