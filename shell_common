# This file loads various defaults on virtually any bourne-compatible
# shell. It's designed to be POSIX and flavour-neutral. Any rc file
# can load this (e.g. zshrc, kshrc, bashrc) for consistency across
# environments
#
# Latest copy always here: https://github.com/mattsday/dotfiles/

# Execute any local bourne script config - local config should go in _local below:
if [ -f "$HOME/.shell_common_config" ]; then
	. "$HOME/.shell_common_config"
fi

# Set some local utilities as default (this must be top of this file after local config)
if [ -d /usr/local/bin ]; then
	# Affix /usr/local/bin to PATH as homebrew zsh doesn't do this for some
	# reason
	PATH=/usr/local/bin:$PATH
	export PATH
fi

# =================
# Alias definitions
# =================
# Load aliases from a separate file and parse them in to bourne-compatible notation 

if [ -f "$HOME/.aliases" ]; then
	. "$HOME/.aliases"
fi

# Colour grep output if GNU grep
grep_ver=`grep --version 2> /dev/null`
case $grep_ver in
	*GNU*|*FreeBSD*)
		alias grep='grep --color=auto'
		alias egrep='egrep --color=auto'
		alias fgrep='fgrep --color=auto'
		GREP_COLORS="ms=01;32:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36"
		export GREP_COLORS
		;;
esac
unset grep_ver

# Find function to quickly look for things in pwd
f() {
	find . -iname "*$1*"
}

# Grep find
gf() {
	grep -Ri "$1"
}

# Disable shell history for session
disable_hist() {
	unset HISTFILE
	set +o history 2>/dev/null
}

# =====================
# Environment variables
# =====================
# These affect most systems and are (usually) harmless if run without...

# Do we need to load proxy settings?
if [ -f "$HOME/.enable_proxy" ]; then
	[ -f "$HOME/.proxy_settings" ] && . $HOME/.proxy_settings
fi

# Check if OpenStack RC file exists:
if [ -f "$HOME/.openstack_credentials" ]; then
	. "$HOME/.openstack_credentials"
fi

# =====================
# Colour support
# =====================
# Checks about terminal colour support

# Check if colours are forced-enabled/disabled:
if [ -f "$HOME/.enable_shell_colour" ]; then
	colours=256
elif [ -f "$HOME/.disable_shell_colour" ]; then
	colours=7
else
	# Test for number of colours
	colours=`tput colors 2> /dev/null`
	# If tput errors out then try and fix...
	if [ $? -gt 0 ]; then
		# If it's reporting as a 256-colour term try changing to just an xterm
		[ "$TERM" = "xterm-256color" ] && TERM=xterm && export TERM
		colours=`tput colors 2> /dev/null`
		# If that still fails then disable colour
		if [ $? -gt 0 ]; then
			colours=7
		fi
	fi
fi

# Execute any local bourne scripts:
if [ -f "$HOME/.shell_common_local" ]; then
	. "$HOME/.shell_common_local"
fi

# vim: syntax=sh
