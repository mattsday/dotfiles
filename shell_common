# This file loads various defaults on virtually any bourne-compatible
# shell. It's designed to be POSIX and flavour-neutral. Any rc file
# can load this (e.g. zshrc, kshrc, bashrc) for consistency across
# environments
#
# Latest copy always here: https://github.com/mattsday/dotfiles/

# Execute any local bourne script config - local config should go in _local below:
if [ -f "$HOME/.shell_common_config" ]; then
	. "$HOME/.shell_common_config"
fi

# Set some local utilities as default (this must be top of this file after local config)
if [ -d /usr/local/bin ]; then
	# Affix /usr/local/bin to PATH as homebrew zsh doesn't do this for some
	# reason
	PATH=/usr/local/bin:$PATH
	export PATH
fi

# =================
# Alias definitions
# =================
# Update the alias file
if [ -f "$HOME/.update_aliases" ]; then
	sh "$HOME/.update_aliases"
fi

# Load aliases from a separate file and parse them in to bourne-compatible notation 
if [ -f "$HOME/.aliases" ]; then
	. "$HOME/.aliases"
fi

# Find function to quickly look for things in pwd
f() {
	find . -iname "*$1*"
}

# Grep find
gf() {
	grep -Ri "$1"
}

# Disable shell history for session
disable_hist() {
	unset HISTFILE
	set +o history 2>/dev/null
}

# Extract archives
extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
		  *.xz)        tar xvJf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# =====================
# Environment variables
# =====================
# These affect most systems and are (usually) harmless if run without...

# Check if proxy settings have been created
if [ -f "$HOME/.sh_proxy_settings" ]; then
	. "$HOME/.sh_proxy_settings"
fi

# =====================
# Colour support
# =====================
# Checks about terminal colour support

# By default disable colour for root (enable by creating ~/.enable_shell_colour):
if [ `id -u` = 0 ]; then
	colours=7
fi

# Check if colours are forced-enabled/disabled:
if [ -f "$HOME/.enable_shell_colour" ]; then
	colours=256
elif [ -f "$HOME/.disable_shell_colour" ]; then
	colours=7
elif [ -z $colours ]; then
	# Test for number of colours
	colours=`tput colors 2> /dev/null`
	# If tput errors out then try and fix...
	if [ $? -gt 0 ]; then
		# If it's reporting as a 256-colour term try changing to just an xterm
		[ "$TERM" = "xterm-256color" ] && TERM=xterm && export TERM
		colours=`tput colors 2> /dev/null`
		# If that still fails then disable colour
		if [ $? -gt 0 ]; then
			colours=7
		fi
	fi
fi

# Execute any local bourne scripts:
if [ -f "$HOME/.shell_common_local" ]; then
	. "$HOME/.shell_common_local"
fi

# vim: syntax=sh
