#!/bin/sh
# This file loads various defaults on virtually any bourne-compatible
# shell. It's designed to be POSIX and flavour-neutral. Any rc file
# can load this (e.g. zshrc, kshrc, bashrc) for consistency across
# environments
#
# This loads aliases and functions, env_common loads environment
# variables
#
# Latest copy always here: https://github.com/mattsday/dotfiles/
#
# shellcheck disable=SC1090

# Execute any local bourne script config - local config should go in _local below:
if [ -f "$HOME/.shell_common_config" ]; then
	. "$HOME/.shell_common_config"
fi

# =================
# Alias definitions
# =================
# Update the alias file
if [ -f "$HOME/.update_aliases" ]; then
	sh "$HOME/.update_aliases"
fi

# Load pre-configured aliases
if [ -f "$HOME/.sh_aliases" ]; then
	. "$HOME/.sh_aliases"
fi

# Check if sdkman is installed
if [ -f "$HOME/.sdkman/bin/sdkman-init.sh" ]; then
	. "$HOME/.sdkman/bin/sdkman-init.sh"
	export _UPDATE_CALLBACKS='yes|sdk update':"$_UPDATE_CALLBACKS"
fi

# Find function to quickly look for things in pwd
f() {
	find . -iname "*$1*"
}

# Grep find
gf() {
	grep -Ri "$1"
}

# Single command to keep a system up to date
update() {
    if [ -x "$HOME"/.update ]; then
            "$HOME"/.update
    fi
}

# Disable shell history for session
disable_hist() {
	unset HISTFILE
	#shellcheck disable=SC2039
	set +o history 2>/dev/null
}

extract() {
	extr "$@"
}

# Extract archives
extr() {
	for file in "$@"; do
		if [ -f "$file" ]; then
			case $file in
			*.tar.bz2) tar xvjf "$@" && rm "$@" ;;
			*.tar.gz) tar xvzf "$@" && rm "$@" ;;
			*.xz) tar xvJf "$@" && rm "$@" ;;
			*.bz2) bunzip2 "$@" && rm "$@" ;;
			*.rar) unrar x "$@" && rm "$@" ;;
			*.gz) gunzip "$@" && rm "$@" ;;
			*.tar) tar xvf "$@" && rm "$@" ;;
			*.tbz2) tar xvjf "$@" && rm "$@" ;;
			*.tgz) tar xvzf "$@" && rm "$@" ;;
			*.zip) unzip "$@" && rm "$@" ;;
			*.Z) uncompress "$@" && rm "$@" ;;
			*.7z) 7za x "$@" && rm "$@" ;;
			*) echo "don't know how to extract '$*'..." ;;
			esac
		fi
	done
}

# =====================
# Colour support
# =====================
# Checks about terminal colour support

# By default disable colour for root (enable by creating ~/.enable_shell_colour):
if [ "$(id -u)" = 0 ]; then
	colours=7
fi

# Check if colours are forced-enabled/disabled:
if [ -f "$HOME/.enable_shell_colour" ]; then
	colours=256
elif [ -f "$HOME/.disable_shell_colour" ]; then
	colours=7
elif [ -z $colours ]; then
	# Test for number of colours
	if ! colours=$(tput colors 2>/dev/null); then
		# If tput errors out then try and fix...
		# If it's reporting as a 256-colour term try changing to just an xterm
		[ "$TERM" = "xterm-256color" ] && TERM=xterm && export TERM
		if ! colours=$(tput colors 2>/dev/null); then
			# If that still fails then disable colour
			colours=7
		fi
	fi
fi

# Disable software flow control (XON/OFF) / AKA: why did ctrl-s pause my term?
if command -v stty >/dev/null 2>&1; then
	stty -ixon
fi

# Fixup Visual Studio Code CLI command if running on native Wayland
# TODO: Remove when Electron supports Wayland/Ozone
# shellcheck disable=SC2139
if VS_CODE="$(command -v code 2>/dev/null)" && [ "$GDK_BACKEND" = wayland ]; then
	alias code="GDK_BACKEND=x11 $VS_CODE"
fi

# Execute any local bourne scripts:
if [ -f "$HOME/.shell_common_local" ]; then
	. "$HOME/.shell_common_local"
fi

# vim: syntax=sh
