#!/bin/sh
# List of dependent files
#shellcheck disable=SC2034

if [ -z "${DOTFILES_ROOT}" ]; then
    if command -v dirname >/dev/null 2>&1 && command -v realpath >/dev/null 2>&1; then
        DOTFILES_ROOT="$(realpath "$(dirname "$0")")"
    elif command -v dirname >/dev/null 2>&1; then
        DOTFILES_ROOT="$(cd "$(dirname "$0")" || return; pwd)"
	else
        echo >&2 '[Error] cannot determine root (try running from working directory)'
        exit 1
    fi
fi

if [ ! -f "${DOTFILES_ROOT}/common.sh" ]; then
	echo >&2 Cannot find . "${DOTFILES_ROOT}/common.sh"
	exit 1
else
	. "${DOTFILES_ROOT}/common.sh"
fi

if [ ! -d "${DOTFILES_ROOT}"/dotfiles/home ]; then
	error Cannot find "${DOTFILES_ROOT}"/dotfiles/home
fi

for i in "${DOTFILES_ROOT}"/dotfiles/home/*; do
	dotfiles="${i} ${dotfiles}"
done

if [ ! -d "${DOTFILES_ROOT}"/dotfiles/config ]; then
	error Cannot find "${DOTFILES_ROOT}"/dotfiles/home
fi

for i in "${DOTFILES_ROOT}"/dotfiles/config/*; do
	configdirs="${i} ${configdirs}"
done

# Firefox userChrome.css file
FF_BASE_DIR="${DOTFILES_ROOT}"/dotfiles/special/firefox
FF_CHROME_FILE="userChrome.css"
first="$(echo "${USER}" | cut -c1 | tr '[:lower:]' '[:upper:]')"
second="$(echo "${USER}" | cut -c2-)"
WINUSER="${first}${second}"
FF_WINDOWS=0

if [ -d "${HOME}/Library/Application Support/Firefox" ]; then
	FF_PROFILE_PATH="${HOME}/Library/Application Support/Firefox"
	FF_CHROME_FILE="userChrome-mac.css"
elif [ -d "${HOME}/.mozilla/firefox" ]; then
	FF_PROFILE_PATH="${HOME}/.mozilla/firefox"
	FF_CHROME_FILE="userChrome-linux.css"
elif [ -d "/mnt/c/Users/${USER}/AppData/Roaming/Mozilla/Firefox/" ]; then
	FF_PROFILE_PATH="/mnt/c/Users/${USER}/AppData/Roaming/Mozilla/Firefox/"
	FF_CHROME_FILE="userChrome-windows.css"
	FF_WINDOWS=1
elif [ -d "/mnt/c/Users/${WINUSER}/AppData/Roaming/Mozilla/Firefox/" ]; then
	FF_PROFILE_PATH="/mnt/c/Users/${WINUSER}/AppData/Roaming/Mozilla/Firefox/"
	FF_CHROME_FILE="userChrome-windows.css"
	FF_WINDOWS=1
fi
FF_PROFILE_INI="${FF_PROFILE_PATH}/profiles.ini"

LOCAL_CHROME="${FF_BASE_DIR}/${FF_CHROME_FILE}"

if [ -f "${FF_PROFILE_INI}" ]; then
	# shellcheck disable=SC2143
	if [ -n "$(grep '\[Profile[^0]\]' "${FF_PROFILE_INI}" 2>/dev/null)" ]; then
		FF_PROFILE="$(tr <"${FF_PROFILE_INI}" -s '\n' '|' | sed 's/\[Profile[0-9]\]/\x0/g; s/$/\x0/; s/.*\x0\([^\x0]*Default=1[^\x0]*\)\x0.*/\1/; s/.*Path=\([^|]*\)|.*/\1/')"
	else
		FF_PROFILE="$(grep 'Path=' "${FF_PROFILE_INI}" 2>/dev/null | sed 's/^Path=//' 2>/dev/null)"
	fi
	# Remove Windows crap from the end of the line
	if [ "${FF_WINDOWS}" = 1 ]; then
		FF_PROFILE="$(echo "${FF_PROFILE}" | sed 's/\\r//g')"
	fi
	FF_PROFILE_PATH="${FF_PROFILE_PATH}/${FF_PROFILE}"
	USER_CHROME="${FF_PROFILE_PATH}/chrome/userChrome.css"
fi

if [ -d "${HOME}/Library/Application Support/Code/User" ]; then
	VS_DIR="${HOME}/Library/Application Support/Code/User"
elif [ -d "${HOME}/.config/Code/User" ]; then
	VS_DIR="${HOME}/.config/Code/User"
fi

extra="
${HOME}/.config/git/ignore
${HOME}/.config/nvim/init.vim
${HOME}/.config/fish/config.fish
${HOME}/.config/terminus/config.yaml
${VS_DIR}/settings.json
"

# Pipewire config files
PIPEWIRE_CONFIG_DIR="${HOME}/.config/pipewire/media-session.d"
PIPEWIRE_CONFIG_ALSA=alsa-monitor.conf
PIPEWIRE_CONFIG_BLUEZ=bluez-monitor.conf
PIPEWIRE_CONFIG_ALSA_PATH="${PIPEWIRE_CONFIG_DIR}"/"${PIPEWIRE_CONFIG_ALSA}"
PIPEWIRE_CONFIG_BLUEZ_PATH="${PIPEWIRE_CONFIG_DIR}"/"${PIPEWIRE_CONFIG_BLUEZ}"
WIREPLUMBER_CONFIG_ALSA=50-alsa-config.lua
WIREPLUMBER_CONFIG_DIR="${HOME}/.config/wireplumber/main.lua.d"
WIREPLUMBER_CONFIG_ALSA_PATH="${WIREPLUMBER_CONFIG_DIR}/${WIREPLUMBER_CONFIG_ALSA}"
